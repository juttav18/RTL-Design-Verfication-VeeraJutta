module spi_master(input wire clk,rst,tx_en,
                  output reg mosi,cs,
                  output wire sclk);
    
    reg spi_sclk = 0;
    reg [1:0]scount = 0;
    integer bcount = 0;
    reg [7:0]din = 8'haa;
    
    typedef enum logic {idle=0,tx_data=1}state_type;
    
    state_type state;
    
    always@(posedge clk)begin
        if(!rst && tx_en)begin
            if (scount < 3)
                scount <= scount + 1;
            else begin
                scount <= 0;
                spi_sclk <= ~ spi_sclk;
            end
        end
    end
    
    always@(posedge sclk)begin
        case(state)
            idle: begin
                mosi <= 1'b0;
                cs <= 1'b1;
                if(!rst && tx_en)begin
                    state <= tx_data;
                    cs <= 1'b0;
                end
                else
                    state <= idle;
            end
            
            tx_data: begin
                if (bcount < 8)begin
                    mosi <= din[7-bcount];
                    bcount <= bcount + 1;
                    state <= tx_data;end
                else begin
                    bcount <= 0;
                    state <= idle;
                    mosi <= 1'b0;
                    cs <= 1'b1;
                end
            end
            default: state <= idle;
        endcase
    end
    
    assign sclk = spi_sclk;
    
endmodule


module spi_slave(input wire cs,mosi,sclk,
                 output reg done,
                 output [7:0]dout);
    
    reg [7:0]data;
    integer bcount;
    
    typedef enum logic {idle=0,sample=1}state_type;
    
    state_type state;
    
    always@(posedge sclk)begin
        case(state)
            idle: begin
                done <= 1'b0;
                if (cs == 1'b0)begin
                    state <= sample;
                end
                else state <= idle;
            end
            
            sample: begin
                if (bcount <8)begin
                    data <= {data[6:0],mosi};
                    state <= sample;
                    bcount <= bcount + 1;end
                else begin 
                    state <= idle;
                    bcount <= 0;
                    done <= 1'b1;
                end
            end
            
            default: state <= idle;
        endcase
    end
    
    assign dout = data;
    
endmodule


module top
(
input clk, rst, tx_enable,
output [7:0] dout,
output done
);

wire mosi, ss, sclk;

spi_master    spi_m (clk, rst, tx_enable, mosi, ss, sclk);
spi_slave  spi_s (sclk, mosi,ss, dout, done);

endmodule


module tb;

    reg clk = 0;
    reg rst = 0;
    reg tx_enable = 0;
    wire [7:0] dout;
    wire done;
    
    
    always #5 clk = ~clk;
    
    initial begin
    rst = 1;
    repeat(5) @(posedge clk);
    rst = 0;
    end

    initial begin
    tx_enable = 0;
    repeat(5) @(posedge clk);
    tx_enable = 1;
    end

top dut (clk, rst, tx_enable, dout, done);

endmodule
